#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "job_parser84.y".
#

require 'racc/parser'


module Composer

  module Parser

    class JobParser < Racc::Parser

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 2, 18, :_reduce_none,
 0, 19, :_reduce_none,
 2, 19, :_reduce_none,
 2, 20, :_reduce_4,
 1, 21, :_reduce_5,
 3, 21, :_reduce_6,
 1, 22, :_reduce_none,
 2, 22, :_reduce_none,
 2, 23, :_reduce_9,
 2, 23, :_reduce_10,
 2, 23, :_reduce_11,
 2, 23, :_reduce_12,
 2, 23, :_reduce_13,
 2, 23, :_reduce_14,
 2, 23, :_reduce_15,
 2, 23, :_reduce_16,
 1, 23, :_reduce_17,
 2, 23, :_reduce_18,
 4, 23, :_reduce_19,
 0, 24, :_reduce_none,
 2, 24, :_reduce_21,
 4, 24, :_reduce_22,
 0, 25, :_reduce_none,
 2, 25, :_reduce_24 ]

racc_reduce_n = 25

racc_shift_n = 40

racc_action_table = [
    15,    16,    17,    29,    18,    19,    10,    12,    28,    14,
    15,    16,    17,    22,    18,    19,    10,    12,    21,    14,
    24,    26,    25,    20,     9,     8,     5,     1,    27,     4,
    30,    31,    33,    34,    36,    37,    38,    39 ]

racc_action_check = [
     7,     7,     7,    16,     7,     7,     7,     7,    16,     7,
    11,    11,    11,    10,    11,    11,    11,    11,    10,    11,
    12,    14,    12,     9,     5,     4,     3,     0,    15,     2,
    18,    19,    31,    32,    33,    34,    36,    38 ]

racc_action_pointer = [
    23,   nil,    29,    11,    25,     8,   nil,    -5,   nil,     8,
     5,     5,     7,   nil,     6,    15,    -5,   nil,    17,    16,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    29,    31,    19,    22,   nil,    20,   nil,    22,   nil ]

racc_action_default = [
   -25,    -2,   -25,    -1,   -25,    -5,    -3,   -25,    40,   -25,
   -25,    -4,   -25,    -7,   -25,   -25,   -25,   -17,   -25,   -25,
    -6,   -10,    -9,    -8,   -14,   -13,   -16,   -15,   -11,   -12,
   -18,   -20,   -23,   -25,   -25,   -19,   -21,   -24,   -25,   -22 ]

racc_goto_table = [
    13,    11,     6,     7,    23,     3,     2,    32,    35 ]

racc_goto_check = [
     6,     5,     3,     4,     6,     2,     1,     7,     8 ]

racc_goto_pointer = [
   nil,     6,     4,    -1,     0,    -6,    -7,   -24,   -24 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :ABENDPROMPT => 2,
 :AFTER => 3,
 :DECLARE => 4,
 :DESCRIPTION => 5,
 :DOCOMMAND => 6,
 :INTERACTIVE => 7,
 :PATH => 8,
 :RCCONDSUCC => 9,
 :RECOVERY => 10,
 :SCRIPTNAME => 11,
 :STREAMLOGON => 12,
 :STRING => 13,
 :TASKTYPE => 14,
 :WORD => 15,
 "#" => 16 }

racc_use_result_var = true

racc_nt_base = 17

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'ABENDPROMPT',
'AFTER',
'DECLARE',
'DESCRIPTION',
'DOCOMMAND',
'INTERACTIVE',
'PATH',
'RCCONDSUCC',
'RECOVERY',
'SCRIPTNAME',
'STREAMLOGON',
'STRING',
'TASKTYPE',
'WORD',
'"#"',
'$start',
'jobs',
'stmts',
'job',
'name',
'jobdescs',
'jobdesc',
'rcvjobstmt',
'rcvprmptstmt']

Racc_debug_parser = true

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

 # reduce 2 omitted

 # reduce 3 omitted

module_eval <<'.,.,', 'job_parser84.y', 16
  def _reduce_4( val, _values, result )
                @logger.warn(self.class){ "JOB is not set enough. [ #{@job.inspect} ]"} unless @job.set_enough?
								@logger.info(self.class){ "JOB [ #{@job.name} ] was reduced." }
								@jobs.push @job
								@job=::Composer::TwsObj::Job.new
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 18
  def _reduce_5( val, _values, result )
 @job.name = val[0]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 25
  def _reduce_6( val, _values, result )
								@job.wkstation = val[0]
								@job.name = val[2]
								result=val.join('')
   result
  end
.,.,

 # reduce 7 omitted

 # reduce 8 omitted

module_eval <<'.,.,', 'job_parser84.y', 30
  def _reduce_9( val, _values, result )
 @job.scriptname = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 32
  def _reduce_10( val, _values, result )
 @job.scriptname = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 34
  def _reduce_11( val, _values, result )
 @job.docommand = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 36
  def _reduce_12( val, _values, result )
 @job.docommand = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 38
  def _reduce_13( val, _values, result )
 @job.streamlogon = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 40
  def _reduce_14( val, _values, result )
 @job.streamlogon = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 42
  def _reduce_15( val, _values, result )
 @job.description = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 44
  def _reduce_16( val, _values, result )
 @job.tasktype = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 46
  def _reduce_17( val, _values, result )
 @job.interactive=true
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 48
  def _reduce_18( val, _values, result )
 @job.rccondsucc=val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 50
  def _reduce_19( val, _values, result )
 @job.recovery = is_valid?(['STOP','CONTINUE','RERUN'],val[1])
   result
  end
.,.,

 # reduce 20 omitted

module_eval <<'.,.,', 'job_parser84.y', 54
  def _reduce_21( val, _values, result )
 @job.recovery_job_name = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'job_parser84.y', 60
  def _reduce_22( val, _values, result )
								@job.recovery_job_wkstation = val[1]
								@job.recovery_job_name = val[3]
   result
  end
.,.,

 # reduce 23 omitted

module_eval <<'.,.,', 'job_parser84.y', 63
  def _reduce_24( val, _values, result )
 @job.abendprompt = val[1]
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

    end   # class JobParser

  end   # module Parser

end   # module Composer
